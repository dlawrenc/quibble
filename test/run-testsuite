#!/bin/bash
#
# Script for running the Quibble test suite. When run without any paramaters, the script will
# run every test suite and report the results to the terminal and a generate a report file in the
# "results" directory.
#
# When given the name of a test suite directory, the script will run every test it can find in the
# directory and generate a report. This script can also be used to run a single test.
#
# Example usage:   run-testsuite (runs every testsuite)
#                  run-testsuite testsuite-dir (runs one testsuite)
#                  run-testsuite test (runs one test)
#
# Exit codes:
#
# 0 - if all the tests run by the script pass
# 1 - if one or more of the tests run by the script fail
# 2 - if the script has some internal error or is supplied with invalid parameters

if [ $# -gt 1 ]; then
    echo "Usage: run-testsuite       (runs every testsuite)" >&2
    echo "       run-testsuite dir   (runs one testsuite)" >&2
    echo "       run-testuite test   (runs one test)" >&2
    exit 2
fi

results="$(dirname $0)/results"

# java needs a classpath to know where the main class for quibble is located
export CLASSPATH="../$(dirname $0)/out/production/quibble.git"

if [[ ! -d "$results" ]]; then
    mkdir "$results"
fi

report_dir="report-$(date +%Y-%m-%d-%H%M%S)"
report="$results/$report_dir"
touch "$report"

echo "---------- $(date +%Y/%m/%d) ----------" >| "$report"

testsuite_dir="$1"
# if the user didn't supply a testuite to run, we will run every test in the root
# test directory instead.
if [[ -z "$testsuite_dir" ]]; then
    testsuite_dir="$(dirname $0)"
fi

# exit status
status=0

# tests/tests_passed per suite
tests_passed=0
tests=0

# tests_tests_passed per entire run
total_tests_passed=0
total_tests=0


# If the first parameter is empty or a directory, we will need to find every valid test
# in a single testsuite. We will consider a subdirectory to be a valid test if it contains
# three files: Input          - the input for the test
#              ExpectedOutput - the expected output of the test
#              CurrentEvents  - the current events file for the test
#
# For simplicity, the script will search for all folders for input files, and then
# then check to see that the parent directories of the inputs are valid tests.
if [[ -d "$testsuite_dir" ]]; then
    test_input=$(find $1 -type f -name "Input")
    echo "Suite:" >> "$report"

    last_suite=""
    current_suite=""

    for input in $test_input; do
        test_name=$(dirname "$input")
        current_suite=$(dirname "$test_name")

        # we must be in a new suite, make sure the output reflects this
        if [[ "$current_suite" != "$last_suite" ]]; then

            # print number of tests passed for the last suite
            if [[ $total_tests -ne 0 ]]; then
                echo "$last_suite: $tests_passed/$tests tests passed"
                echo

                echo "$last_suite: $tests_passed/$tests tests passed" >> "$report"
                echo >> "$report"

                tests_passed=0
                tests=0
            fi

            echo "$current_suite"
            echo "$current_suite" >> "$report"
            last_suite="$current_suite"
        fi

        echo -n "    $test_name - "
        echo -n "    $test_name - " >> "$report"

        java src.Main "$test_name/CurrentEvents" < $input &> CurrentOutput
        transactions=transaction-*
        for t in $transactions; do
            [ -e "$t" ] && cat $t >> CurrentTFile || touch CurrentTFile
        done


        if [[ $? -ne 0 ]]; then
            s=$?
            echo "failed"
            echo "        Quibble exited with status $s"

            echo "failed" >> "$report"
            echo '---------- quibble exit failure ----------' >> "$report"
            cat temp >> "$report"
            echo >> "$report"

            status=1

        elif ! diff CurrentOutput "$test_name/ExpectedOutput" &> /dev/null; then
            echo "failed"
            echo "        Expected output mismatch"

            echo "failed" >> "$report"
            echo '---------- output mismatch ----------' >> "$report"
            diff -u CurrentOutput "$test_name/ExpectedOutput" >> "$report"
            echo >> "$report"

            status=1

        elif ! diff CurrentTFile "$test_name/ExpectedTFile" &> /dev/null; then
            echo "failed"
            echo "        Expected transaction file mismatch"

            echo "failed" >> "$report"
            echo '---------- transaction mismatch ----------' >> "$report"
            diff -u CurrentTFile "$test_name/ExpectedTFile" >> "$report"
            echo >> "$report"

            status=1

        else
            echo "passed"
            echo "passed" >> "$report"
            (( tests_passed++ ))
            (( total_tests_passed++ ))
        fi

        # cleanup the temp files and transaction files from the run
        rm -f CurrentTFile
        rm -f CurrentOutput
        rm -f transaction-*

        (( tests++ ))
        (( total_tests++ ))

    done

    echo "$last_suite: $tests_passed/$tests tests passed"
    echo "$last_suite: $tests_passed/$tests tests passed" >> "$report"
    echo
    echo >> "$report"
    echo "$total_tests_passed/$total_tests tests passed"
    echo "$total_tests_passed/$total_tests tests passed" >> "$report"

fi

if [[ $status -ne 0 ]]; then
    echo "Some tests failed. Please see report $report for details."
fi

exit $status
